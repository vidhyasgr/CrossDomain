package com.kianaanalytics.location.locationServer;


import com.kianaanalytics.util.logging.Logger;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.FilterHolder;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;


/**
 * The <code>JettyServer</code> class if initialized, creates a Jetty Server at
 * Port 8080. It handles the hole REST service for CRUD of a <code>Job</code>.
 * 
 * @author Ich
 *
 */
public class JettyServer {

	private static Logger log = Logger.getLogger(JettyServer.class.getSimpleName());

	private static JettyServer instance = null;

	public static JettyServer getInstance() {
		if (instance == null) {
			instance = new JettyServer();
		}
		return instance;
	}

	public static void initialize() {
		JettyServer.getInstance();
	}

	private Server server;

	private JettyServer() {
		new Thread(new Runnable() {

			@Override
			public void run() {
				try {
					server = new Server(8080);
//					server = new Server(8085;

					ServletContextHandler context = new ServletContextHandler();
					context.setContextPath("/");
					server.setHandler(context);

					ServletHolder jerseyServlet = context
							.addServlet(org.glassfish.jersey.servlet.ServletContainer.class, "/Localization/rest/*");
					jerseyServlet.setInitOrder(1);
//					jerseyServlet.setInitParameter("jersey.config.server.provider.packages",
//							"com.kianaanalytics.location.rest");

					jerseyServlet.setInitParameter("jersey.config.server.provider.packages",
							"com.kianaanalytics.location.rest,com.fasterxml.jackson.jaxrs.json");


					FilterHolder filterHolder = new FilterHolder(CrossOriginFilter.class);
					filterHolder.setInitParameter("allowedOrigins", "*");
					filterHolder.setInitParameter("allowedMethods", "GET, POST");
					context.addFilter(filterHolder, "/*", null);

					server.start();
					server.join();
				} catch (Exception e) {
					log.severe(e.getMessage());
				}

			}
		}).start();
	}

}
